---
openapi: 3.0.0
info:
  title: Online Support Ticket System API - Group 14
  description: |-
    <h3>Software Engineering Project: Milestone 4</h3>
    <h3>Task: API Endpoints Documentation</h3>
    <h3>Course: BSCSS3001 - Software Engineering</h3>
    <h3>Group: 14</h3>
    <h3>Members:
    <ul><li>Tushar Supe (21F1003637)</li>
    <li>Vaidehi Agarwal (21F1003880)</li></ul>
    </h3>
    <h3>Program: Online BSc in Programming and Data Science</h3>
    <h3>Institute: Indian Institute of Technology, Madras</h3>
    </br></br>


    <h3> This is a Online Support Ticket System API. The database schemas are as follows:</h3>

    <h3> [1] Auth Table Schema </h3>
    <h4>Auth table contains all details about user including login status.</h4>
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
        <th>Remarks</th>
      </thead>
      <tbody>
      <tr>
        <td>user_id</td>
        <td>String</td>
        <td>Primary Key</td>
        <td>Unique and can't be changed</td>
      </tr>
      <tr>
        <td>role</td>
        <td>String</td>
        <td>Not Null</td>
        <td>Can't be changed</td>
      </tr>
      <tr>
        <td>web_token</td>
        <td>String</td>
        <td>Nullable</td>
        <td>Temporary web token for logged in users</td>
      </tr>
      <tr>
        <td>is_verified</td>
        <td>Bool</td>
        <td>Not Null</td>
        <td>Default: False</td>
      </tr>
      <tr>
        <td>is_logged</td>
        <td>Bool</td>
        <td>Not Null</td>
        <td>Default: False</td>
      </tr>
      <tr>
        <td>token_created_on</td>
        <td>Int</td>
        <td>Nullable</td>
        <td>Timestamp in int format</td>
      </tr>
      <tr>
        <td>token_expiry_on</td>
        <td>Int</td>
        <td>Nullable</td>
        <td>Timestamp in int format</td>
      </tr>
      <tr>
        <td>email</td>
        <td>String</td>
        <td>Not Null, Unique</td>
        <td>Editable with verification</td>
      </tr>
      <tr>
        <td>password</td>
        <td>String</td>
        <td>Not Null</td>
        <td>Editable</td>
      </tr>
      <tr>
        <td>first_name</td>
        <td>String</td>
        <td>Not Null</td>
        <td>Editable</td>
      </tr>
      <tr>
        <td>last_name</td>
        <td>String</td>
        <td>Not Null</td>
        <td>Editable</td>
      </tr>
      <tr>
        <td>profile_photo_loc</td>
        <td>String</td>
        <td>Nullable</td>
        <td>Location of profile photo</td>
      </tr>
      </tbody>
    </table>
    <h3> [2] Ticket Table Schema </h3>
    <h4>Ticket table contains all ticket details for student and support staff.</h4>
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
        <th>Remarks</th>
      </thead>
      <tbody>
      <tr>
        <td>ticket_id</td>
        <td>String</td>
        <td>Primary Key</td>
        <td>Unique and can't be changed</td>
      </tr>
      <tr>
        <td>title</td>
        <td>String</td>
        <td>Not Null</td>
        <td>Editable</td>
      </tr>
      <tr>
        <td>description</td>
        <td>String</td>
        <td>Null</td>
        <td>Editable</td>
      </tr>
      <tr>
        <td>priority</td>
        <td>String</td>
        <td>Not Null</td>
        <td>low (default), medium, high</td>
      </tr>
      <tr>
        <td>tag_1</td>
        <td>String</td>
        <td>Not Null</td>
        <td>Editable (min 1 and max 3 tags)</td>
      </tr>
      <tr>
        <td>tag_2</td>
        <td>String</td>
        <td>Nullable</td>
        <td>Editable</td>
      </tr>
      <tr>
        <td>tag_3</td>
        <td>String</td>
        <td>Nullable</td>
        <td>Editable</td>
      </tr>
      <tr>
        <td>status</td>
        <td>String</td>
        <td>Nullable</td>
        <td>Pending/Resolved</td>
      </tr>
      <tr>
        <td>votes</td>
        <td>Int</td>
        <td>Not Null</td>
        <td>Default: 0, creater can't vote, 1 vote/student</td>
      </tr>
      <tr>
        <td>created_by</td>
        <td>String</td>
        <td>Not Null</td>
        <td>student id who created</td>
      </tr>
      <tr>
        <td>created_on</td>
        <td>Int</td>
        <td>Not Null</td>
        <td>Timestamp in int format</td>
      </tr>
      <tr>
        <td>resolved_by</td>
        <td>String</td>
        <td>Nullable</td>
        <td>support id who resolved</td>
      </tr>
      <tr>
        <td>resolved_on</td>
        <td>Int</td>
        <td>Nullable</td>
        <td>Timestamp in int format</td>
      </tr>
      <tr>
        <td>solution</td>
        <td>String</td>
        <td>Nullable</td>
        <td>solution provided by support</td>
      </tr>
      </tbody>
    </table>
    <h3> [3] TicketAttachment Table Schema </h3>
    <h4>TicketAttachment table contains all attachments for the ticket. Its a one-many relationship.</h4>
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
        <th>Remarks</th>
      </thead>
      <tbody>
      <tr>
        <td>ticket_id</td>
        <td>String</td>
        <td>Primary Key, Foreign Key</td>
        <td>Unique and can't be changed</td>
      </tr>
      <tr>
        <td>user_id</td>
        <td>String</td>
        <td>Primary Key, Foreign Key</td>
        <td></td>
      </tr>
      <tr>
        <td>attachment_loc</td>
        <td>String</td>
        <td>Primary Key</td>
        <td>Editable</td>
      </tr>
      </tbody>
    </table>
    <h3> [4] TicketVote Table Schema </h3>
    <h4>TicketVote table contains all votes for the ticket. Its a many-many relationship.</h4>
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
        <th>Remarks</th>
      </thead>
      <tbody>
      <tr>
        <td>ticket_id</td>
        <td>String</td>
        <td>Primary Key, Foreign Key</td>
        <td>Unique and can't be changed</td>
      </tr>
      <tr>
        <td>user_id</td>
        <td>String</td>
        <td>Primary Key, Foreign Key</td>
        <td></td>
      </tr>
      </tbody>
    </table>
    <h3> [5] FAQ Table Schema </h3>
    <h4>FAQ table contains all faq questions</h4>
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
        <th>Remarks</th>
      </thead>
      <tbody>
      <tr>
        <td>faq_id</td>
        <td>String</td>
        <td>Primary Key</td>
        <td>Unique and can't be changed</td>
      </tr>
      <tr>
        <td>question</td>
        <td>String</td>
        <td>Not Null</td>
        <td></td>
      </tr>
      <tr>
        <td>answer</td>
        <td>String</td>
        <td>Not Null</td>
        <td></td>
      </tr>
      <tr>
        <td>created_by</td>
        <td>String</td>
        <td>Not Null</td>
        <td>admin id who created</td>
      </tr>
      <tr>
        <td>tag_1</td>
        <td>String</td>
        <td>Nullable</td>
        <td></td>
      </tr>
      <tr>
        <td>tag_2</td>
        <td>String</td>
        <td>Nullable</td>
        <td></td>
      </tr>
      <tr>
        <td>tag_3</td>
        <td>String</td>
        <td>Nullable</td>
        <td></td>
      </tr>
      </tbody>
    </table>
    <h3> [6] FAQAttachment Table Schema </h3>
    <h4>FAQAttachment table contains all attachments for the faq. Its a one-many relationship.</h4>
    <table>
      <thead>
        <th>Column Name</th>
        <th>Column Type</th>
        <th>Constraints</th>
        <th>Remarks</th>
      </thead>
      <tbody>
      <tr>
        <td>faq_id</td>
        <td>String</td>
        <td>Primary Key, Foreign Key</td>
        <td>Unique and can't be changed</td>
      </tr>
      <tr>
        <td>attachment_loc</td>
        <td>String</td>
        <td>Primary Key</td>
        <td></td>
      </tr>
      </tbody>
    </table>
    </br></br>
  termsOfService: http://swagger.io/terms/
  contact:
    name: Tushar Supe
    email: 21f1003637@ds.study.iitm.ac.in
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.2.0
servers:
- url: https://virtserver.swaggerhub.com/s_Tushar/OSTS_14_Resolved_Updated_9Mar/1.2.0
  description: SwaggerHub API Auto Mocking
- url: https://virtserver.swaggerhub.com/s_Tushar/OSTS_14_API/1.1.0
  description: SwaggerHub API Auto Mocking
- url: http://127.0.0.1:5000/
  description: Local Host
tags:
- name: SendMessage
  description: Webhook
- name: Login
  description: Login a user
- name: Register
  description: Register a user
- name: NewUsers
  description: Verify and validate new users. Only admin can access this endpoint.
- name: Ticket
  description: To perform CRUD operations on single ticket
- name: AllTickets
  description: Get all tickets for different categories and different types of users.
- name: Student
  description: Get or update user details
- name: Support
  description: Get or update support staff details
- name: Admin
  description: Get or update admin details
- name: FAQ
  description: Get all FAQs or create a new FAQ.
paths:
  /api/v1/webhook:
    post:
      tags:
        - Webhook
      summary: Send a message to a Google Chat room with username and message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sender:
                  type: string
                  example: John Doe
                  description: The sender's name
                post:
                  type: string
                  example: Hello from Flask-RESTful!
                  description: The content of the message
      responses:
        '200':
          description: Message sent successfully
        '400':
          description: Bad request - Message text is required
        '500':
          description: Internal server error - Failed to send message


  /api/v1/auth/login:
    post:
      tags:
      - Login
      summary: Log in a user into OSTS
      operationId: loginUser
      requestBody:
        $ref: '#/components/requestBodies/LoginForm'
      responses:
        "200":
          description: Successfully logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: Client specified an invalid user details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "401":
          description: Request not authenticated due to missing/invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "403":
          description: Client does not have sufficient permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/auth/register:
    post:
      tags:
      - Register
      summary: Register a new user into OSTS
      operationId: registerUser
      requestBody:
        $ref: '#/components/requestBodies/RegisterForm'
      responses:
        "200":
          description: Successfully account created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: Client specified an invalid details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "409":
          description: Email address already exists in database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/auth/newUsers:
    get:
      tags:
      - NewUsers
      summary: Get new users data (which are not verified).
      operationId: getNewUsers
      responses:
        "200":
          description: Successfully new users data retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "401":
          description: Request not authenticated due to missing/invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "403":
          description: Client does not have sufficient permission. Only admins can access this endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/auth/newUsers/{user_id}:
    put:
      tags:
      - NewUsers
      summary: Update user as verified and creates a new user with the same username in discourse.
      operationId: updateNewUsers
      parameters:
      - name: user_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newUsers_user_id_body'
      responses:
        "200":
          description: New user details are verified and accepted and an user with the same username is created in discourse as well.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Client specified an invalid user id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "401":
          description: Request not authenticated due to missing/invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "403":
          description: Client does not have sufficient permission. Only admins have access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: Provided user id is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    delete:
      tags:
      - NewUsers
      summary: Delete new users data which are rejected by admin during verification.
      operationId: deleteNewUsers
      parameters:
      - name: user_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: New user verification failed and user account is deleted by admin.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Client specified an invalid user id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "401":
          description: Request not authenticated due to missing/invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "403":
          description: Client does not have sufficient permission. Only admins have access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/ticket/{ticket_id}/{user_id}:
    get:
      tags:
      - Ticket
      summary: Retrieve a ticket.
      operationId: getTicket
      parameters:
      - name: ticket_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successfully retrieved a ticket.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "400":
          description: Client specified an invalid arguments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "401":
          description: Request not authenticated due to missing/invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "403":
          description: Client does not have sufficient permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: Given ticket id or user id is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    put:
      tags:
      - Ticket
      summary: Update ticket data and number of votes in OSTS as well as discourse
      operationId: updateTicket
      parameters:
      - name: ticket_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/TicketForm'
      responses:
        "200":
          description: Ticket data updated successfully in OSTS as well as discourse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Client specified an invalid arguments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "401":
          description: Request not authenticated due to missing/invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "403":
          description: Client does not have sufficient permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: Ticket id is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    delete:
      tags:
      - Ticket
      summary: Delete a ticket in OSTS as well as Discourse.
      operationId: deleteTicket
      parameters:
      - name: ticket_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Ticket successfully deleted from OSTS as well as Discourse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Client specified an invalid user id or ticket id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "401":
          description: Request not authenticated due to missing/invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "403":
          description: Client does not have sufficient permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: Ticket id is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/ticket/{user_id}:
    post:
      tags:
      - Ticket
      summary: Create a new Ticket in OSTS as well as discourse
      operationId: createTicket
      parameters:
      - name: user_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        $ref: '#/components/requestBodies/CreateTicketForm'
      responses:
        "200":
          description: New ticket successfully created in OSTS as well as discourse.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Client specified an invalid argument.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "401":
          description: Request not authenticated due to missing/invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "403":
          description: Client does not have sufficient permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/ticket/all-tickets:
    get:
      tags:
      - AllTickets
      summary: Retrieve all tickets for searching.
      operationId: getAllTickets
      responses:
        "200":
          description: Successfully retrieved all tickets as per query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "400":
          description: Invalid query string received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "401":
          description: Request not authenticated due to missing/invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "403":
          description: Client does not have sufficient permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: A specified resource is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/ticket/all-tickets/{user_id}:
    get:
      tags:
      - AllTickets
      summary: Retrieve all tickets for the user as per user role.
      operationId: getAllUserTickets
      parameters:
      - name: user_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successfully retrieved all tickets as per query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "400":
          description: Invalid query string received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "401":
          description: Request not authenticated due to missing/invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "403":
          description: Client does not have sufficient permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: A specified resource is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/student/{user_id}:
    get:
      tags:
      - Student
      summary: Get student details and metadata of activities.
      operationId: getStudent
      parameters:
      - name: user_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successfully retrieved student details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        "400":
          description: Client specified an invalid user id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "401":
          description: Request not authenticated due to missing/invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "403":
          description: Client does not have sufficient permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: Student id is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    put:
      tags:
      - Student
      summary: Update student profile data.
      operationId: updateStudent
      parameters:
      - name: user_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        "200":
          description: Student details updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Client specified an invalid user id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "401":
          description: Request not authenticated due to missing/invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "403":
          description: Client does not have sufficient permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: Student id is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/support/{user_id}:
    get:
      tags:
      - Support
      summary: Get support details and metadata of activities.
      operationId: getSupport
      parameters:
      - name: user_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successfully retrieved support details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
        "400":
          description: Client specified an invalid user id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "401":
          description: Request not authenticated due to missing/invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "403":
          description: Client does not have sufficient permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: Support id is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    put:
      tags:
      - Support
      summary: Update support profile data.
      operationId: updateSupport
      parameters:
      - name: user_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Support'
      responses:
        "200":
          description: Support details updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Client specified an invalid user id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "401":
          description: Request not authenticated due to missing/invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "403":
          description: Client does not have sufficient permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: Support id is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/admin/{user_id}:
    get:
      tags:
      - Admin
      summary: Get admin details and metadata of activities.
      operationId: getAdmin
      parameters:
      - name: user_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successfully retrieved admin details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
        "400":
          description: Client specified an invalid user id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "401":
          description: Request not authenticated due to missing/invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "403":
          description: Client does not have sufficient permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: Admin id is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    put:
      tags:
      - Admin
      summary: Update admin profile data.
      operationId: updateAdmin
      parameters:
      - name: user_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin'
      responses:
        "200":
          description: Admin details updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Client specified an invalid argument.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "401":
          description: Request not authenticated due to missing/invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "403":
          description: Client does not have sufficient permission.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: Admin id is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/faq:
    get:
      tags:
      - FAQ
      summary: Get all FAQ question and answer.
      operationId: getFAQs
      responses:
        "200":
          description: Successfully retrieved all FAQs details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
        "401":
          description: Request not authenticated due to missing/invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
    post:
      tags:
      - FAQ
      summary: Create new FAQ.
      operationId: createFAQ
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FAQForm'
      responses:
        "200":
          description: New FAQ successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: Client specified an invalid faq form data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "401":
          description: Request not authenticated due to missing/invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "403":
          description: Client does not have sufficient permission. Only admins can create FAQ.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
components:
  schemas:
    Auth:
      required:
      - role
      type: object
      properties:
        user_id:
          type: string
        role:
          type: string
          description: User Role
          enum:
          - student
          - support
          - admin
        web_token:
          type: string
        is_verified:
          type: boolean
          default: false
        is_logged:
          type: boolean
          default: false
        token_created_on:
          type: integer
          description: Timestamp stored as integer
          format: int64
        token_expiry_on:
          type: integer
          format: int64
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
        profile_photo_loc:
          type: string
      xml:
        name: Auth
    Ticket:
      required:
      - created_by
      - tag_1
      - title
      type: object
      properties:
        ticket_id:
          type: string
        title:
          type: string
        description:
          type: string
        priority:
          type: string
          description: Ticket Priority
          enum:
          - low
          - medium
          - high
        tag_1:
          type: string
        tag_2:
          type: string
        tag_3:
          type: string
        status:
          type: string
          description: Ticket Status
          enum:
          - pending
          - resolved
          - duplicate
          - cancelled
        votes:
          type: integer
          format: int64
        created_by:
          type: string
        created_on:
          type: integer
          format: int64
        resolved_by:
          type: string
        resolved_on:
          type: integer
          format: int64
        solution:
          type: string
      xml:
        name: Ticket
    TicketAttachment:
      type: object
      properties:
        ticket_id:
          type: string
        user_id:
          type: string
        attachment_loc:
          type: string
      xml:
        name: TicketAttachment
    TicketVote:
      type: object
      properties:
        ticket_id:
          type: string
        user_id:
          type: string
      xml:
        name: TicketVote
    FAQ:
      required:
      - answer
      - question
      - tag_1
      type: object
      properties:
        faq_id:
          type: string
        question:
          type: string
        answer:
          type: string
        tag_1:
          type: string
        tag_2:
          type: string
        tag_3:
          type: string
        created_by:
          type: string
      xml:
        name: FAQ
    FAQAttachment:
      type: object
      properties:
        faq_id:
          type: string
        attachment_loc:
          type: string
      xml:
        name: FAQAttachment
    LoginForm:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      xml:
        name: LoginForm
    RegisterForm:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
        retype_password:
          type: string
        role:
          type: string
          description: User Role
          enum:
          - student
          - support
          - admin
      xml:
        name: RegisterForm
    ApiResponse:
      required:
      - category
      - message
      - status
      type: object
      properties:
        status:
          type: integer
          format: int32
        category:
          type: string
        message:
          type: string
    TicketForm:
      type: object
      properties:
        ticket_id:
          type: string
        title:
          type: string
        description:
          type: string
        priority:
          type: string
          description: Ticket Priority
          enum:
          - low
          - medium
          - high
        tag_1:
          type: string
        tag_2:
          type: string
        tag_3:
          type: string
        status:
          type: string
          description: Ticket Status
          enum:
          - pending
          - resolved
          - duplicate
          - cancelled
        votes:
          type: integer
          format: int64
        created_by:
          type: string
        created_on:
          type: integer
          format: int64
        resolved_by:
          type: string
        resolved_on:
          type: integer
          format: int64
        solution:
          type: string
        attachments:
          type: array
          description: Array of attachments
          nullable: true
          items:
            $ref: '#/components/schemas/TicketForm_attachments'
    CreateTicketForm:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        priority:
          type: string
          description: Ticket Priority
          enum:
          - low
          - medium
          - high
        tag_1:
          type: string
        tag_2:
          type: string
        tag_3:
          type: string
        created_by:
          type: string
        created_on:
          type: integer
          format: int64
        attachments:
          type: array
          description: Array of attachments
          nullable: true
          items:
            $ref: '#/components/schemas/TicketForm_attachments'
    StudentForm:
      type: object
      properties:
        user_id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
        profile_photo_loc:
          type: string
        n_tickets_created:
          type: integer
        n_tickets_resolved:
          type: integer
        n_tickets_unresolved:
          type: integer
        n_tickets_upvoted:
          type: integer
      xml:
        name: StudentForm
    SupportForm:
      type: object
      properties:
        user_id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
        profile_photo_loc:
          type: string
        n_tickets_resolved:
          type: integer
        n_total_unresolved_tickets:
          type: integer
      xml:
        name: SupportForm
    AdminForm:
      type: object
      properties:
        user_id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
        profile_photo_loc:
          type: string
        n_total_unresolved_tickets:
          type: integer
        n_total_resolved_tickets:
          type: integer
        n_tickets_today:
          type: integer
        n_tickets_week:
          type: integer
        n_tickets_month:
          type: integer
        n_student:
          type: integer
        n_support:
          type: integer
        n_admin:
          type: integer
        n_student_new:
          type: integer
        n_support_new:
          type: integer
      xml:
        name: AdminForm
    FAQForm:
      type: object
      properties:
        faq_id:
          type: string
        question:
          type: string
        answer:
          type: string
        tag_1:
          type: string
        tag_2:
          type: string
        tag_3:
          type: string
        created_by:
          type: string
        attachments:
          type: array
          description: Array of attachments
          nullable: true
          items:
            $ref: '#/components/schemas/FAQForm_attachments'
      xml:
        name: FAQForm
    Student:
      required:
      - email
      - first_name
      - password
      type: object
      properties:
        user_id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
        profile_photo_loc:
          type: string
      xml:
        name: Student
    Support:
      required:
      - email
      - first_name
      - password
      type: object
      properties:
        user_id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
        profile_photo_loc:
          type: string
      xml:
        name: Support
    Admin:
      required:
      - email
      - first_name
      - password
      type: object
      properties:
        user_id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
        profile_photo_loc:
          type: string
      xml:
        name: Admin
    inline_response_200:
      type: object
      properties:
        category:
          type: string
        status:
          type: integer
        message:
          $ref: '#/components/schemas/inline_response_200_message'
    inline_response_200_1:
      type: object
      properties:
        category:
          type: string
        status:
          type: integer
        message:
          type: array
          description: Array of user objects
          nullable: true
          items:
            $ref: '#/components/schemas/inline_response_200_1_message'
    newUsers_user_id_body:
      type: object
      properties:
        user_id:
          type: string
        verified:
          type: boolean
    inline_response_200_2:
      type: object
      properties:
        category:
          type: string
        status:
          type: integer
        message:
          $ref: '#/components/schemas/TicketForm'
    inline_response_200_3:
      type: object
      properties:
        category:
          type: string
        status:
          type: integer
        message:
          type: array
          items:
            $ref: '#/components/schemas/TicketForm'
    inline_response_200_4:
      type: object
      properties:
        category:
          type: string
        status:
          type: integer
        message:
          $ref: '#/components/schemas/StudentForm'
    inline_response_200_5:
      type: object
      properties:
        category:
          type: string
        status:
          type: integer
        message:
          $ref: '#/components/schemas/SupportForm'
    inline_response_200_6:
      type: object
      properties:
        category:
          type: string
        status:
          type: integer
        message:
          $ref: '#/components/schemas/AdminForm'
    inline_response_200_7:
      type: object
      properties:
        category:
          type: string
        status:
          type: integer
        message:
          type: array
          description: Array of FAQs
          items:
            $ref: '#/components/schemas/FAQForm'
    TicketForm_attachments:
      type: object
      properties:
        user_id:
          type: string
        attachment_loc:
          type: string
    FAQForm_attachments:
      type: object
      properties:
        attachment_loc:
          type: string
    inline_response_200_message:
      type: object
      properties:
        user_id:
          type: string
        web_token:
          type: string
        token_expiry_on:
          type: integer
    inline_response_200_1_message:
      type: object
      properties:
        user_id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        role:
          type: string
  responses:
    Success:
      description: Operation successfully completed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    BadRequest:
      description: Client specified an invalid argument.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Unauthenticated:
      description: Request not authenticated due to missing/invalid token.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    PermissionDenied:
      description: Client does not have sufficient permission.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    NotFound:
      description: A specified resource is not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    MethodNotAllowed:
      description: Request method is known by the server but is not supported by the target resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    AlreadyExists:
      description: An existing resource conflicts with the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    ServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
  requestBodies:
    LoginForm:
      description: LoginForm
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginForm'
        application/xml:
          schema:
            $ref: '#/components/schemas/LoginForm'
      required: true
    RegisterForm:
      description: RegisterForm
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterForm'
        application/xml:
          schema:
            $ref: '#/components/schemas/RegisterForm'
      required: true
    TicketForm:
      description: TicketForm
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TicketForm'
        application/xml:
          schema:
            $ref: '#/components/schemas/TicketForm'
      required: true
    CreateTicketForm:
      description: CreateTicketForm
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateTicketForm'
        application/xml:
          schema:
            $ref: '#/components/schemas/CreateTicketForm'
      required: true
